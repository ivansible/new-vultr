---
- name: record server parameters
  set_fact:
    vr_name: "{{ vultr_name }}"
    vr_invename: "{{ name }}"
    vr_os: "{{ vultr_os_map.get(vultr_os|lower, vultr_os) }}"
    vr_region: "{{ vultr_region_map.get(vultr_region|upper, vultr_region) }}"
    vr_plan: "{{ vultr_plan_map.get(vultr_plan|string, vultr_plan) }}"
    vr_key_name: "{{ vultr_key_name }}"
    vr_key_pub: "{{ lookup('pipe', keygen_cmd) }}"
    vr_ssh_port: "{{ vultr_ssh_port }}"
    vr_username: "{{ vultr_username }}"
    vr_uid: "{{ vultr_uid }}"
    vr_script_name: "{{ script }}"
  vars:
    name: "{{ vultr_name if (vultr_inventory in [1,'on','yes','true'])
              else '' if (not vultr_inventory |bool)
              else vultr_inventory }}"
    script: enter-{{ vultr_ssh_port }}-{{ vultr_username }}-{{ vultr_uid }}.sh
    # deliberately use ';' in the pipe to ignore chmod errors
    keygen_cmd: 'chmod 600 "{{ keyfile }}"; ssh-keygen -y -f "{{ keyfile }}"'
    keyfile: "{{ vultr_key_file }}"
  tags:
    - vr_facts
    - vr_all


- name: initialize local vultr.ini
  copy:
    dest: "{{ ansible_user_dir }}/.vultr.ini"
    content: |
      [default]
  connection: localhost
  tags:
    - vr_ini
    - vr_all


- name: upload ssh key
  vultr_ssh_key:
    name: "{{ vr_key_name }}"
    ssh_key: "{{ vr_key_pub }}"
  connection: local
  when: vultr_key_file != '' and vultr_key_name != ''  # noqa 602
  tags:
    - vr_key
    - vr_all


- name: upload startup script
  vultr_startup_script:
    name: "{{ vr_script_name }}"
    script: "{{ lookup('template', 'startup-script.sh') }}"
  tags:
    - vr_script
    - vr_all


- name: create vultr server
  vultr_server:
    api_account: default
    api_key: "{{ vultr_api_key }}"
    name: "{{ vr_name }}"
    os: "{{ vr_os }}"
    plan: "{{ vr_plan }}"
    region: "{{ vr_region }}"
    ssh_key: "{{ vr_key_name }}"
    startup_script: "{{ vr_script_name }}"
    state: started
    validate_certs: false
  connection: localhost
  register: vr_server_result
  tags:
    - vr_server
    - vr_all


- name: record ip/port/user of new server
  set_fact:
    vr_inven_entry: "ansible_host={{ ip_addr }} ansible_port={{ vr_ssh_port }} ansible_user={{ vr_username }}"
  vars:
    ip_addr: "{{ vr_server_result.vultr_server.v4_main_ip }}"
  tags:
    - vr_inven
    - vr_all


- name: register new host in the ansible inventory
  lineinfile:
    path: "{{ vultr_inventory_file }}"
    regexp: "^{{ vr_invename }} "
    line: "{{ vr_invename }}    {{ vr_inven_entry }}"
  connection: localhost
  when: vr_invename != '' and vultr_inventory_file != ''  # noqa 602
  tags:
    - vr_inven
    - vr_all


- debug:
    msg:
      - "Inventory entry for your new host:"
      - "{{ vr_invename }}    {{ vr_inven_entry }}"
  tags:
    - vr_info
    - vr_all
...
